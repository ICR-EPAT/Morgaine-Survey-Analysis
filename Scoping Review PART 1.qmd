---
title: "Scoping Review Final"
format: html
editor: visual
---

#Import data

```{r import data, include=FALSE}

library(readxl)

estimanddb_final <- read_xlsx("Scoping review spreadsheet.xlsx")

```

#Missing data

```{r missing data check, include=TRUE}

#NCT Number missing values:

print("Count of total missing values")
sum(is.na(estimanddb_final$`NCT number (if available)`))
print("Position of missing values ")
which(is.na(estimanddb_final$`NCT number (if available)`))

# "Count of total missing values"
# 1
# "Position of missing values "
# 1986

#Does not appear to have NCT number, use "Nil known" for NCT Number field in row 1986.

estimanddb_final$`NCT number (if available)`[is.na(estimanddb_final$`NCT number (if available)`)] <- "Nil known"

print("Count of total missing values")
sum(is.na(estimanddb_final$`NCT number (if available)`))
print("Position of missing values ")
which(is.na(estimanddb_final$`NCT number (if available)`))

#[1] "Count of total missing values"
#[1] 0
#[1] "Position of missing values "
#integer(0)

##################################################################################################################################

#ISRCTN Number missing values:

print("Count of total missing values")
sum(is.na(estimanddb_final$`ISRCTN number (if available)`))
print("Position of missing values ")
which(is.na(estimanddb_final$`ISRCTN number (if available)`))

#[1] "Count of total missing values"
#[1] 0
#[1] "Position of missing values "
#integer(0)

##################################################################################################################################

#Funding Type missing values:

print("Count of total missing values")
sum(is.na(estimanddb_final$`Funding type`))
print("Position of missing values ")
which(is.na(estimanddb_final$`Funding type`))

#> print("Count of total missing values")
#[1] "Count of total missing values"
#> sum(is.na(estimanddb_final$`Funding type`))
#[1] 0
#> print("Position of missing values ")
#[1] "Position of missing values "
#> which(is.na(estimanddb_final$`Funding type`))
#integer(0)

table(estimanddb_final$'Funding type')

#    Industry      Missing Non-Industry        Other 
#        1146           28          877            4 

##################################################################################################################################

#Trial design missing values

print("Count of total missing values")
sum(is.na(estimanddb_final$`Treatment allocation`))
print("Position of missing values ")
which(is.na(estimanddb_final$`Treatment allocation`))

#[1] "Count of total missing values"
#[1] 0
#[1] "Position of missing values "
#integer(0)

##################################################################################################################################

#Intervention type missing values

print("Count of total missing values")
sum(is.na(estimanddb_final$`Intervention type`))
print("Position of missing values ")
which(is.na(estimanddb_final$`Intervention type`))

#[1] "Count of total missing values"
#[1] 0
#[1] "Position of missing values "
#integer(0)

##################################################################################################################################

#Protocol available missing values

print("Count of total missing values")
sum(is.na(estimanddb_final$`Protocol file available?`))
print("Position of missing values ")
which(is.na(estimanddb_final$`Protocol file available?`))

#> print("Count of total missing values")
#[1] "Count of total missing values"
#> sum(is.na(estimanddb_final$`Protocol file available?`))
#[1] 0
#> print("Position of missing values ")
#[1] "Position of missing values "
#> which(is.na(estimanddb_final$`Protocol file available?`))
#integer(0)

##################################################################################################################################

#SAP available missing values

print("Count of total missing values")
sum(is.na(estimanddb_final$`SAP file available?`))
print("Position of missing values ")
which(is.na(estimanddb_final$`SAP file available?`))

#> print("Count of total missing values")
#[1] "Count of total missing values"
#> sum(is.na(estimanddb_final$`SAP file available?`))
#[1] 0
#> print("Position of missing values ")
#[1] "Position of missing values "
#> which(is.na(estimanddb_final$`SAP file available?`))
#integer(0)

##################################################################################################################################

#Trial phase missing values

print("Count of total missing values")
sum(is.na(estimanddb_final$`Trial Phase`))
print("Position of missing values ")
which(is.na(estimanddb_final$`Trial Phase`))

#> print("Count of total missing values")
#[1] "Count of total missing values"
#> sum(is.na(estimanddb_final$`Trial Phase`))
#[1] 0
#> print("Position of missing values ")
#[1] "Position of missing values "
#> which(is.na(estimanddb_final$`Trial Phase`))
#integer(0)

##################################################################################################################################

#Sponsor type missing values

print("Count of total missing values")
sum(is.na(estimanddb_final$`Sponsor type`))
print("Position of missing values ")
which(is.na(estimanddb_final$`Sponsor type`))

#> print("Count of total missing values")
#[1] "Count of total missing values"
#> sum(is.na(estimanddb_final$`Sponsor type`))
#[1] 0
#> print("Position of missing values ")
#[1] "Position of missing values "
#> which(is.na(estimanddb_final$`Sponsor type`))
#integer(0)

###################################################################################################################################

#In the UK?

print("Count of total missing values")
sum(is.na(estimanddb_final$`Running in UK?`))
print("Position of missing values ")
which(is.na(estimanddb_final$`Running in UK?`))

#[1] "Count of total missing values"
#[1] 0
#[1] "Position of missing values "
#integer(0)

###################################################################################################################################

#Intervention model

print("Count of total missing values")
sum(is.na(estimanddb_final$`Intervention model`))
print("Position of missing values ")
which(is.na(estimanddb_final$`Intervention model`))

#[1] "Count of total missing values"
#[1] 0
#[1] "Position of missing values "
#integer(0)

###################################################################################################################################

#Single or multi-country?

print("Count of total missing values")
sum(is.na(estimanddb_final$`Single or multi-country?`))
print("Position of missing values ")
which(is.na(estimanddb_final$`Single or multi-country?`))

#[1] "Count of total missing values"
#[1] 0
#[1] "Position of missing values "
#integer(0)

###################################################################################################################################

#Cancer or non-cancer?

print("Count of total missing values")
sum(is.na(estimanddb_final$`Cancer or non-cancer disease`))
print("Position of missing values ")
which(is.na(estimanddb_final$`Cancer or non-cancer disease`))

#[1] "Count of total missing values"
#[1] 0
#[1] "Position of missing values "
#integer(0)

###################################################################################################################################

#Intervention type

print("Count of total missing values")
sum(is.na(estimanddb_final$`Intervention type`))
print("Position of missing values ")
which(is.na(estimanddb_final$`Intervention type`))

#[1] "Count of total missing values"
#[1] 0
#[1] "Position of missing values "
#integer(0)

###################################################################################################################################

#Year opened

print("Count of total missing values")
sum(is.na(estimanddb_final$`Year opened`))
print("Position of missing values ")
which(is.na(estimanddb_final$`Year opened`))

#[1] "Count of total missing values"
#[1] 0
#[1] "Position of missing values "
#integer(0)

###################################################################################################################################

#Estimands used?

print("Count of total missing values")
sum(is.na(estimanddb_final$`Estimands used?`))
print("Position of missing values ")
which(is.na(estimanddb_final$`Estimands used?`))

#[1] "Count of total missing values"
#[1] 0
#[1] "Position of missing values "
#integer(0)

```

#Tables

```{r, tables, include=TRUE}

table(estimanddb_final$`Sponsor type`)

#    Industry      Missing Non-Industry 
#          68         1888           99 

table(estimanddb_final$`Sponsor country`)

# Australia; United Kingdom                    Belgium                     Brazil                     Canada 
#                         2                          1                          2                          1 
#                     China Congo, Democratic Republic             Czech Republic                     Greece 
#                         1                          1                          1                          2 
#                     Italy                       Mali                Netherlands                    Nigeria 
#                         4                          1                          2                          1 
#                        NK                      Spain                     Sweden                Switzerland 
#                        23                          1                          9                          7 
#                    Taiwan                  UK and US             United Kingdom              United States 
#                         1                          1                         86                         22 
#  United States of America 
#                         1 

table(estimanddb_final$`Funding type`)

#    Industry      Missing Non-Industry        Other 
#        1146           28          877            4

table(estimanddb_final$`Single or multi-country?`)

#Multiple   Single 
#     508     1547 

table(estimanddb_final$`Running in UK?`)

#  No  Yes 
#1782  273 

table(estimanddb_final$`Treatment allocation`)

#       Missing Non-Randomised     Randomised 
#           469            200           1386 

table(estimanddb_final$`Intervention model`)

#   Crossover    Factorial      Missing     Parallel   Sequential Single Group 
#         177           13           68         1171          158          468

table(estimanddb_final$`Trial Phase`)

#     Phase I   Phase I/II     Phase II Phase II/III    Phase III Phase III/IV 
#         487          160          784           82          539            3 

table(estimanddb_final$`Cancer or non-cancer disease`)

#    Cancer Non-cancer 
#       376       1679 

table(estimanddb_final$`Cancer or non-cancer disease`)

#    Cancer Non-cancer 
#       376       1679 

table(estimanddb_final$`Intervention type`)

#                                    Behavioural                                          Device 
#                                             43                                              35 
#                                            IMP     Multiple intervention types (including IMP) 
#                                           1760                                             116 
#Multiple intervention types (not including IMP)                                           Other 
#                                              7                                              74 
#                              Procedure/Surgery 
#                                             20 

table(estimanddb_final$`Year opened`)

#2021 2022 2023 2024 
#1197  580  195   83

estimanddb_final$`Estimands used?`[estimanddb_final$`Estimands used?` == "yes"] <- "Yes"

table(estimanddb_final$`Estimands used?`)

#  No  Yes 
#1666  389

table(estimanddb_final$`Protocol file available?`)

#Combined       No      Yes 
#     730       30     1295 

table(estimanddb_final$`SAP file available?`)

#Combined       No      Yes 
#     730      248     1077 

```

#Contingency tables

```{r contingency tables, include=TRUE}

#Sponsor type

estimanddb_final_table <- estimanddb_final

library(gtsummary)
library(ggplot2)
library(dplyr)

estimanddb_final_table$`Sponsor type`[estimanddb_final_table$`Sponsor type` == "Missing"] <- NA

table(estimanddb_final_table$`Sponsor type`, estimanddb_final_table$`Estimands used?`)

estimanddb_final_table |> tbl_summary(by = `Estimands used?`, include = `Sponsor type`, percent = "row") |>
  add_n() |>
  add_overall(last=TRUE) |>
  modify_spanning_header(c("stat_1", "stat_2") ~ "**Estimand's used?**") |>
  modify_caption("**Table 1. Estimand usage by sponsor type**") |>
  bold_labels() |>
  add_p(test.args = all_tests("fisher.test") ~ list(workspace=2e9))

##################################################################################################################################

#Funding type

estimanddb_final_table$`Funding type`[estimanddb_final_table$`Funding type` == "Missing"] <- NA

table(estimanddb_final_table$`Funding type`, estimanddb_final_table$`Estimands used?`)

estimanddb_final_table |> tbl_summary(by = `Estimands used?`, include = `Funding type`, percent = "row") |>
  add_n() |>
  add_overall(last=TRUE) |>
  modify_spanning_header(c("stat_1", "stat_2") ~ "**Estimand's used?**") |>
  modify_caption("**Table 2. Estimand usage by funding type**") |>
  bold_labels() |>
  add_p(test.args = all_tests("fisher.test") ~ list(workspace=2e9))

##################################################################################################################################

#Single or multi-country?

table(estimanddb_final_table$`Single or multi-country?`, estimanddb_final_table$`Estimands used?`)

estimanddb_final_table |> tbl_summary(by = `Estimands used?`, include = `Single or multi-country?`, percent = "row") |>
  add_n() |>
  add_overall(last=TRUE) |>
  modify_spanning_header(c("stat_1", "stat_2") ~ "**Estimand's used?**") |>
  modify_caption("**Table 3. Estimand usage by country**") |>
  bold_labels() |>
  add_p(test.args = all_tests("fisher.test") ~ list(workspace=2e9))

##################################################################################################################################

#Running in the UK?

estimanddb_final_table$'Trial in UK?' <- estimanddb_final_table$`Running in UK?`

estimanddb_final_table$`Trial in UK?` <- as.factor(estimanddb_final_table$`Trial in UK?`)
levels(estimanddb_final_table$`Trial in UK?`) <- c("No", "Yes")

table(estimanddb_final_table$`Running in UK?`, estimanddb_final_table$`Estimands used?`)

estimanddb_final_table |> tbl_summary(by = `Estimands used?`, include = `Trial in UK?`, percent = "row", type = `Trial in UK?` ~ "categorical") |>
  add_n() |>
  add_overall(last=TRUE) |>
  modify_spanning_header(c("stat_1", "stat_2") ~ "**Estimand's used?**") |>
  modify_caption("**Table 4. Estimand usage by UK trial status**") |>
  bold_labels() |>
  add_p(test.args = all_tests("fisher.test") ~ list(workspace=2e9))

#Something wrong - won't break down the Run In UK into Yes/No - maybe need to re-level?

##################################################################################################################################

#Treatment allocation

table(estimanddb_final_table$`Treatment allocation`, estimanddb_final_table$`Estimands used?`)
estimanddb_final_table$`Treatment allocation`[estimanddb_final_table$`Treatment allocation` == "Missing"] <- NA

estimanddb_final_table |> tbl_summary(by = `Estimands used?`, include = `Treatment allocation`, percent = "row") |>
  add_n() |>
  add_overall(last=TRUE) |>
  modify_spanning_header(c("stat_1", "stat_2") ~ "**Estimand's used?**") |>
  modify_caption("**Table 5. Estimand usage by treatment allocation**") |>
  bold_labels() |>
  add_p(test.args = all_tests("fisher.test") ~ list(workspace=2e9))

##################################################################################################################################

#Intervention model

table(estimanddb_final_table$`Intervention model`, estimanddb_final_table$`Estimands used?`)
estimanddb_final_table$`Intervention model`[estimanddb_final_table$`Intervention model` == "Missing"] <- NA

estimanddb_final_table |> tbl_summary(by = `Estimands used?`, include = `Intervention model`, percent = "row") |>
  add_n() |>
  add_overall(last=TRUE) |>
  modify_spanning_header(c("stat_1", "stat_2") ~ "**Estimand's used?**") |>
  modify_caption("**Table 6. Estimand usage by intervention model**") |>
  bold_labels() |>
  add_p(test.args = all_tests("fisher.test") ~ list(workspace=2e9))

##################################################################################################################################

#Trial phase

table(estimanddb_final_table$`Trial Phase`, estimanddb_final_table$`Estimands used?`)

estimanddb_final_table |> tbl_summary(by = `Estimands used?`, include = `Trial Phase`, percent = "row") |>
  add_n() |>
  add_overall(last=TRUE) |>
  modify_spanning_header(c("stat_1", "stat_2") ~ "**Estimand's used?**") |>
  modify_caption("**Table 7. Estimand usage by trial phase**") |>
  bold_labels() |>
  add_p(test.args = all_tests("fisher.test") ~ list(workspace=2e9))

##################################################################################################################################

#SAP availability

table(estimanddb_final_table$`SAP file available?`, estimanddb_final_table$`Estimands used?`)

estimanddb_final_table |> tbl_summary(by = `Estimands used?`, include = `SAP file available?`, percent = "row") |>
  add_n() |>
  add_overall(last=TRUE) |>
  modify_spanning_header(c("stat_1", "stat_2") ~ "**Estimand's used?**") |>
  modify_caption("**Table 8. Estimand usage by SAP availability**") |>
  bold_labels() |>
  add_p(test.args = all_tests("fisher.test") ~ list(workspace=2e9))

##################################################################################################################################

#Protocol availability

table(estimanddb_final_table$`Protocol file available?`, estimanddb_final_table$`Estimands used?`)

estimanddb_final_table |> tbl_summary(by = `Estimands used?`, include = `Protocol file available?`, percent = "row") |>
  add_n() |>
  add_overall(last=TRUE) |>
  modify_spanning_header(c("stat_1", "stat_2") ~ "**Estimand's used?**") |>
  modify_caption("**Table 9. Estimand usage by Protocol availability**") |>
  bold_labels() |>
  add_p(test.args = all_tests("fisher.test") ~ list(workspace=2e9))

##################################################################################################################################

#Year opened

table(estimanddb_final_table$`Year opened`, estimanddb_final_table$`Estimands used?`)

estimanddb_final_table |> tbl_summary(by = `Estimands used?`, include = `Year opened`, percent = "row") |>
  add_n() |>
  add_overall(last=TRUE) |>
  modify_spanning_header(c("stat_1", "stat_2") ~ "**Estimand's used?**") |>
  modify_caption("**Table 10. Estimand usage by year opened**") |>
  bold_labels() |>
  add_p(test.args = all_tests("fisher.test") ~ list(workspace=2e9))

##################################################################################################################################

#Cancer or non-cancer disease

table(estimanddb_final_table$`Cancer or non-cancer disease`, estimanddb_final_table$`Estimands used?`)

estimanddb_final_table |> tbl_summary(by = `Estimands used?`, include = `Cancer or non-cancer disease`, percent = "row") |>
  add_n() |>
  add_overall(last=TRUE) |>
  modify_spanning_header(c("stat_1", "stat_2") ~ "**Estimand's used?**") |>
  modify_caption("**Table 11. Estimand usage by disease status**") |>
  bold_labels() |>
  add_p(test.args = all_tests("fisher.test") ~ list(workspace=2e9))

#######################################################################################################################

#Overall table

estimanddb_final_table |> tbl_summary(by = `Estimands used?`, include = c(
  `Sponsor type`, 
  `Funding type`, 
  `Single or multi-country?`, 
  `Trial in UK?`, 
  `Treatment allocation`, 
  `Intervention model`, 
  `Trial Phase`, 
  `SAP file available?`, 
  `Protocol file available?`, 
  `Year opened`, 
  `Cancer or non-cancer disease`
),
  percent = "row",
  type = `Trial in UK?` ~ "categorical") |>
  add_n() |>
  add_overall(last=TRUE) |>
  modify_spanning_header(c("stat_1", "stat_2") ~ "**Estimand's used?**") |>
  italicize_levels() |>
  modify_caption("**Table 12. Estimand usage by category**") |>
  bold_labels() |>
  add_p(test.args = all_tests("fisher.test") ~ list(workspace=2e9)) |>
  bold_p(t=0.05)

```

#Logistic regression 1

```{r logisitic regression, include=TRUE}

estimanddb_final_table$`NCT number (if available)`[estimanddb_final_table$`NCT number (if available)` == "Nil known"] <- NA
estimanddb_final_table$`ISRCTN number (if available)`[estimanddb_final_table$`ISRCTN number (if available)` == "Nil known"] <- NA

#Estimand's used (Y/Dependent-variable)

library(dplyr)

estimand_model <- estimanddb_final_table[, c("Estimands used?", "Sponsor type", "Funding type", "Cancer or non-cancer disease", "Year opened", "Running in UK?", "Single or multi-country?", "Treatment allocation", "Intervention model", "Trial Phase")]

estimand_model <- estimand_model %>%
  rename(estimand = `Estimands used?`)

estimand_model$estimand_num <- ifelse(estimand_model$estimand == "Yes", 1, 0)
estimand_model$estimand_num <- as.factor(estimand_model$estimand_num)


#Covariates (X/Independent variables)

estimand_model <- estimand_model %>%
  rename(sponsor = `Sponsor type`)
estimand_model$sponsor[is.na(estimand_model$sponsor)] <- "Missing"
estimand_model$sponsor <- as.factor(estimand_model$sponsor)

estimand_model <- estimand_model %>%
  rename(funding = `Funding type`)
estimand_model$funding[is.na(estimand_model$funding)] <- "Missing"
estimand_model$funding <- as.factor(estimand_model$funding)

estimand_model <- estimand_model %>%
  rename(cancer = `Cancer or non-cancer disease`)
estimand_model$cancer <- as.factor(estimand_model$cancer)

estimand_model <- estimand_model %>%
  rename(year = `Year opened`)
estimand_model$year <- as.factor(estimand_model$year)

estimand_model <- estimand_model %>%
  rename(uk = `Running in UK?`)
estimand_model$uk <- as.factor(estimand_model$uk)

estimand_model <- estimand_model %>%
  rename(country = `Single or multi-country?`)
estimand_model$country <- as.factor(estimand_model$country)

estimand_model <- estimand_model %>%
  rename(random = `Treatment allocation`)
estimand_model$random[is.na(estimand_model$random)] <- "Missing"
estimand_model$random <- as.factor(estimand_model$random)

estimand_model <- estimand_model %>%
  rename(int_model = `Intervention model`)
estimand_model$int_model[is.na(estimand_model$int_model)] <- "Missing"
estimand_model$int_model <- as.factor(estimand_model$int_model)

estimand_model <- estimand_model %>%
  rename(phase = `Trial Phase`)
estimand_model$phase <- as.factor(estimand_model$phase)

#######################################################################################################################

library(dplyr)

anyDuplicated(estimanddb_final_table$`NCT number (if available)`)

#[1] 1952 <- is NA

NCTcounts <- table(estimanddb_final_table$`NCT number (if available)`)
NCT_2_counts <- NCTcounts[NCTcounts > 1]

if(length(NCT_2_counts) > 0) {
  print("Values occurring more than 1 times:")
  print(NCT_2_counts)
} else {
  print("No values occur more than 1 times.")
}

#[1] "No values occur more than 1 times."

anyDuplicated(estimanddb_final_table$`ISRCTN number (if available)`)

#[1] 2 <- is NA

ISRCTNcounts <- table(estimanddb_final_table$`ISRCTN number (if available)`)
ISRCTN_2_counts <- ISRCTNcounts[ISRCTNcounts > 1]

if(length(ISRCTN_2_counts) > 0) {
  print("Values occurring more than 1 times:")
  print(ISRCTN_2_counts)
} else {
  print("No values occur more than 1 times.")
}

#[1] "No values occur more than 1 times."

######################################################################################################################

#Fit model with all covariates

model1 <- glm(estimand_num ~ sponsor + funding + cancer + year + uk + country + random + int_model + phase, data = estimand_model, family = binomial(link = "logit"))

summary(model1)

#Call:
#glm(formula = estimand_num ~ sponsor + funding + cancer + year + 
#    uk + country + random + int_model + phase, family = binomial(link = "logit"), 
#    data = estimand_model)
#
#Coefficients:
#                        Estimate Std. Error z value Pr(>|z|)    
#(Intercept)            -3.066122   0.767808  -3.993 6.51e-05 ***
#sponsorMissing         -0.371945   0.321556  -1.157  0.24739    
#sponsorNon-Industry     0.771864   0.581094   1.328  0.18408    
#fundingMissing         -2.428303   0.862260  -2.816  0.00486 ** 
#fundingNon-Industry    -2.407215   0.240051 -10.028  < 2e-16 ***
#fundingOther          -12.873769 412.544147  -0.031  0.97511    
#cancerNon-cancer        0.652169   0.226443   2.880  0.00398 ** 
#year2022                0.158790   0.156809   1.013  0.31124    
#year2023                0.394158   0.301784   1.306  0.19152    
#year2024                0.711971   0.471133   1.511  0.13074    
#ukYes                  -0.002074   0.197868  -0.010  0.99164    
#countrySingle          -1.087433   0.158163  -6.875 6.18e-12 ***
#randomNon-Randomised   -0.153409   0.509324  -0.301  0.76326    
#randomRandomised        0.555077   0.518105   1.071  0.28401    
#int_modelFactorial      1.429720   1.141227   1.253  0.21028    
#int_modelMissing       -0.279750   0.790684  -0.354  0.72348    
#int_modelParallel       1.078945   0.409769   2.633  0.00846 ** 
#int_modelSequential     1.014895   0.510981   1.986  0.04701 *  
#int_modelSingle Group   0.876521   0.640677   1.368  0.17128    
#phasePhase I/II        -0.180227   0.523465  -0.344  0.73062    
#phasePhase II           1.290633   0.271566   4.753 2.01e-06 ***
#phasePhase II/III       1.764194   0.408504   4.319 1.57e-05 ***
#phasePhase III          1.756655   0.276077   6.363 1.98e-10 ***
#phasePhase III/IV     -10.088367 499.253692  -0.020  0.98388    
#---
#Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

#(Dispersion parameter for binomial family taken to be 1)

#    Null deviance: 1994.2  on 2054  degrees of freedom
#Residual deviance: 1373.9  on 2031  degrees of freedom
#AIC: 1421.9

#Number of Fisher Scoring iterations: 13

############### May want to re-level variables of interest to look at comparison's (e.g. - 2022 vs 2023 may be of more interest than 2021 vs 2022)

########################################################################################################################

#Check all assumptions

#Check independence, linearity of log odds, outliers/influential points and multicollinearity

library(tidyverse)
sapply(estimand_model, function(x) sum(is.na(x)))

#Check model using GAMLSS
par(mfrow=c(1,1))
library(gamlss)
model1.1 <- gamlss(estimand_num ~ sponsor + funding + cancer + year + uk + country + random + int_model + phase, family = BI, data = estimand_model)
plot(model1.1)

########################################################################################################################
```

#Checking invididual covariates

```{r individual covariate exploration, include=TRUE}

#Sponsor

library(ggplot2)

ggplot(estimand_model, aes(x = sponsor,
                           y=estimand_num)) +
  geom_jitter(height = 0.05,
              alpha=0.1)

estimand_model_recode1 <- estimand_model

#Recoding sponsor covariate (Non-Industry = 0, Industry = 1, Missing = 2)

estimand_model_recode1$sponsor <- factor(estimand_model_recode1$sponsor, levels = c("Non-Industry", "Industry", "Missing"))

library(ggplot2)

ggplot(estimand_model_recode1, aes(x = sponsor,
                           y=estimand_num)) +
  geom_jitter(height = 0.05,
              alpha=0.1)

#####################################################################################################################

#Funding

library(ggplot2)

ggplot(estimand_model, aes(x = funding,
                           y=estimand_num)) +
  geom_jitter(height = 0.05,
              alpha=0.1)

#Recoding funding covariate (Non-Industry = 0, Industry = 1, Other = 2, Missing = 3)

estimand_model_recode1$funding <- factor(estimand_model_recode1$funding, levels = c("Non-Industry", "Industry", "Other", "Missing"))

ggplot(estimand_model_recode1, aes(x = funding,
                           y=estimand_num)) +
  geom_jitter(height = 0.05,
              alpha=0.1)

#####################################################################################################################

#Cancer

library(ggplot2)

ggplot(estimand_model, aes(x = cancer,
                           y=estimand_num)) +
  geom_jitter(height = 0.05,
              alpha=0.1)

#Recoding cancer covariate (Non-cancer = 0, Cancer = 1)

estimand_model_recode1$cancer <- factor(estimand_model_recode1$cancer, levels = c("Non-cancer", "Cancer"))

ggplot(estimand_model_recode1, aes(x = cancer,
                           y=estimand_num)) +
  geom_jitter(height = 0.05,
              alpha=0.1)

#####################################################################################################################

#Year

ggplot(estimand_model_recode1, aes(x = year,
                           y=estimand_num)) +
  geom_jitter(height = 0.05,
              alpha=0.1)

#Keep leveling the same

#####################################################################################################################

#UK

ggplot(estimand_model_recode1, aes(x = uk,
                           y=estimand_num)) +
  geom_jitter(height = 0.05,
              alpha=0.1)

#Keep leveling the same

#####################################################################################################################

#Country

ggplot(estimand_model_recode1, aes(x = country,
                           y=estimand_num)) +
  geom_jitter(height = 0.05,
              alpha=0.1)

#Recoding cancer covariate (Single = 0, Multiple = 1)

estimand_model_recode1$country <- factor(estimand_model_recode1$country, levels = c("Single", "Multiple"))

ggplot(estimand_model_recode1, aes(x = country,
                           y=estimand_num)) +
  geom_jitter(height = 0.05,
              alpha=0.1)

#####################################################################################################################

#Phase

ggplot(estimand_model_recode1, aes(x = phase,
                           y=estimand_num)) +
  geom_jitter(height = 0.05,
              alpha=0.1)

#Keep leveling the same

####################################################################################################################

#####################################################################################################################

#Random

ggplot(estimand_model_recode1, aes(x = random,
                           y=estimand_num)) +
  geom_jitter(height = 0.05,
              alpha=0.1)

#Recoding random covariate (Non-randomised = 0, Missing = 1, Randomised=2)

estimand_model_recode1$random <- factor(estimand_model_recode1$random, levels = c("Non-Randomised", "Missing", "Randomised"))

ggplot(estimand_model_recode1, aes(x = random,
                           y=estimand_num)) +
  geom_jitter(height = 0.05,
              alpha=0.1)

#####################################################################################################################

#Int_model

ggplot(estimand_model_recode1, aes(x = int_model,
                           y=estimand_num)) +
  geom_jitter(height = 0.05,
              alpha=0.1)

estimand_model_recode1$int_model <- factor(estimand_model_recode1$int_model, levels = c("Parallel", "Factorial", "Crossover", "Sequential", "Single Group", "Missing"))

ggplot(estimand_model_recode1, aes(x = int_model,
                           y=estimand_num)) +
  geom_jitter(height = 0.05,
              alpha=0.1)

```

#Logisitic regression 2

```{r re-coded variables, include=TRUE}

model2 <- glm(estimand_num ~ sponsor + funding + cancer + year + uk + country + random + int_model + phase, data = estimand_model_recode1, family = binomial(link = "logit"))

summary(model2)

confint(model2)

library(gtsummary)

tbl_regression(model2, exponentiate = TRUE, label = list(
  sponsor ~ "Sponsor",
  funding ~ "Funder",
  cancer ~ "Cancer or Non-Cancer",
  year ~ "Year",
  uk ~ "Trial run in the UK?",
  country = "Single/Multiple Country",
  random ~ "Allocation Type",
  int_model ~ "Intervention Design",
  phase ~ "Trial Phase"
)) %>%
  modify_caption("Part 1 - Multivariate Logisitic Regression") %>%
  italicize_levels() %>%
  bold_p(t=0.05) %>%
  bold_labels() %>%
  add_n()


```

#Plots

```{r Plotting, include=TRUE}

pred_probs <- predict(model2, type = "response")
pred_df <- data.frame(sponsor = estimand_model_recode1$sponsor, prob = pred_probs)

#Sponsor

plot(estimand_model_recode1$sponsor, pred_probs)
pred_df$sponsor <- factor(pred_df$sponsor)

#ggplot(pred_df, aes(x = sponsor, y = prob)) +
#  geom_point(aes(color = sponsor), size = 1.5) +  # Add points for each category
#  geom_smooth(method = "lm", aes(group = 1), color = "black", linetype = "dotted", size = 0.5, se #= FALSE) +  # Add dotted black line
#  labs(x = "Sponsor Type", y = "Predicted Probability", color = "Sponsor Type") +
#  theme_minimal() +
#  ggtitle("Predicted Probabiliies for Different Sponsor Types (with linear fit)")

#This is innapropriate since it is a categorical variable, and not continuous.

ggplot(pred_df, aes(x = sponsor, y = prob)) +
  geom_boxplot(aes(color = sponsor), alpha = 0.3, outlier.shape = TRUE, width = 0.4) +
  labs(x = "Sponsor Type", y = "Predicted Probability", color = "Sponsor Type") +
  scale_y_continuous(limits = c(0, 1)) +
  theme_minimal() +
  ggtitle("Predicted Probabilities for Sponsor Type")

filtered_sponsor <- pred_df %>%
  filter(sponsor %in% c("Non-Industry", "Industry"))

ggplot(filtered_sponsor, aes(x = sponsor, y = prob)) +
  geom_boxplot(aes(color = sponsor), alpha = 0.3, outlier.shape = TRUE, width = 0.4) +
  labs(x = "Sponsor Type", y = "Predicted Probability", color = "Sponsor Type") +
  scale_y_continuous(limits = c(0, 1)) +
  theme_minimal() +
  ggtitle("Predicted Probabilities for Sponsor Type")

ggplot(filtered_sponsor, aes(x = sponsor, y = prob)) +
  geom_boxplot(aes(color = sponsor), alpha = 0.3, outlier.shape = TRUE, width = 0.4) +  # Boxplot with narrower width
  geom_smooth(method = "loess", aes(group = 1), color = "black", linetype = "dotted", size = 0.5) +  
  labs(x = "Sponsor Type", y = "Predicted Probability", color = "Sponsor Type") +  
  scale_y_continuous(limits = c(0, 1)) + 
  theme_minimal() +
  ggtitle("Predicted Probabilities for Sponsor Type with LOESS Line")

ggplot(filtered_sponsor, aes(x = sponsor, y = prob)) +
  geom_point(aes(color = sponsor), size = 1.5) +  # Add points for each category
  geom_smooth(method = "loess", aes(group = 1), color = "black", linetype = "dotted", size = 0.5, se = TRUE) +
  labs(x = "Sponsor Type", y = "Predicted Probability", color = "Sponsor Type") +
  scale_y_continuous(limits = c(0, 1)) + 
  theme_minimal() +
  ggtitle("Predicted Probabilities for Sponsor Types (with LOESS)")

####################################################################################################################

#Funding

pred_df <- data.frame(funding = estimand_model_recode1$funding, prob = pred_probs)
pred_df$funding <- factor(pred_df$funding)

ggplot(pred_df, aes(x = funding, y = prob)) +
  geom_boxplot(aes(color = funding), alpha = 0.3, outlier.shape = TRUE, width = 0.4) +
  labs(x = "Funding Type", y = "Predicted Probability", color = "Funding Type") +
  scale_y_continuous(limits = c(0, 1)) +
  theme_minimal() +
  ggtitle("Predicted Probabilities for Funding Type")

filtered_funding <- pred_df %>%
  filter(funding %in% c("Non-Industry", "Industry", "Other"))

ggplot(filtered_funding, aes(x = funding, y = prob)) +
  geom_boxplot(aes(color = funding), alpha = 0.3, outlier.shape = TRUE, width = 0.4) +
  labs(x = "Funding  Type", y = "Predicted Probability", color = "Funding Type") +
  scale_y_continuous(limits = c(0, 1)) +
  theme_minimal() +
  ggtitle("Predicted Probabilities for Funding Type")

ggplot(filtered_funding, aes(x = funding, y = prob)) +
  geom_boxplot(aes(color = funding), alpha = 0.3, outlier.shape = TRUE, width = 0.4) + 
  geom_smooth(method = "loess", aes(group = 1), color = "black", linetype = "dotted", size = 0.5) +  
  labs(x = "Funding Type", y = "Predicted Probability", color = "Funding Type") +  
  scale_y_continuous(limits = c(0, 1)) + 
  theme_minimal() +
  ggtitle("Predicted Probabilities for Funding Type with LOESS Line")

ggplot(filtered_funding, aes(x = funding, y = prob)) +
  geom_point(aes(color = funding), size = 1.5) +  
  geom_smooth(method = "loess", aes(group = 1), color = "black", linetype = "dotted", size = 0.5, se = TRUE) +
  labs(x = "Funding Type", y = "Predicted Probability", color = "Funding Type") +
  theme_minimal() +
  ggtitle("Predicted Probabilities for Funding Type (with LOESS)")

#Filter to just INDUSTRY VS NON-INDUSTRY

filtered_funding1 <- pred_df %>%
  filter(funding %in% c("Non-Industry", "Industry"))

ggplot(filtered_funding1, aes(x = funding, y = prob)) +
  geom_boxplot(aes(color = funding), alpha = 0.3, outlier.shape = TRUE, width = 0.4) +
  labs(x = "Funding  Type", y = "Predicted Probability", color = "Funding Type") +
  scale_y_continuous(limits = c(0, 1)) +
  theme_minimal() +
  ggtitle("Predicted Probabilities for Funding Type")

ggplot(filtered_funding1, aes(x = funding, y = prob)) +
  geom_boxplot(aes(color = funding), alpha = 0.3, outlier.shape = TRUE, width = 0.4) + 
  geom_smooth(method = "loess", aes(group = 1), color = "black", linetype = "dotted", size = 0.5) +  
  labs(x = "Funding Type", y = "Predicted Probability", color = "Funding Type") +  
  scale_y_continuous(limits = c(0, 1)) + 
  theme_minimal() +
  ggtitle("Predicted Probabilities for Funding Type with LOESS Line")

ggplot(filtered_funding1, aes(x = funding, y = prob)) +
  geom_point(aes(color = funding), size = 1.5) +  
  geom_smooth(method = "loess", aes(group = 1), color = "black", linetype = "dotted", size = 0.5, se = TRUE) +
  labs(x = "Funding Type", y = "Predicted Probability", color = "Funding Type") +
  scale_y_continuous(limits = c(0, 1)) + 
  theme_minimal() +
  ggtitle("Predicted Probabilities for Funding Type (with LOESS)")

####################################################################################################################

#Cancer

pred_df <- data.frame(cancer = estimand_model_recode1$cancer, prob = pred_probs)
pred_df$cancer <- factor(pred_df$cancer)

ggplot(pred_df, aes(x = cancer, y = prob)) +
  geom_boxplot(aes(color = cancer), alpha = 0.3, outlier.shape = TRUE, width = 0.4) +
  labs(x = "Cancer or Non-cancer", y = "Predicted Probability", color = "Cancer or Non-cancer") +
  scale_y_continuous(limits = c(0, 1)) +
  theme_minimal() +
  ggtitle("Predicted Probabilities by Cancer or Non-cancer")

ggplot(pred_df, aes(x = cancer, y = prob)) +
  geom_boxplot(aes(color = cancer), alpha = 0.3, outlier.shape = TRUE, width = 0.4) +
  labs(x = "Cancer or Non-cancer", y = "Predicted Probability", color = "Cancer or Non-cancer") +
  scale_y_continuous(limits = c(0, 1)) +
  theme_minimal() +
  ggtitle("Predicted Probabilities for Cancer or Non-cancer")

ggplot(pred_df, aes(x = cancer, y = prob)) +
  geom_boxplot(aes(color = cancer), alpha = 0.3, outlier.shape = TRUE, width = 0.4) + 
  geom_smooth(method = "loess", aes(group = 1), color = "black", linetype = "dotted", size = 0.5, span = 0.9) +  
  labs(x = "Cancer or Non-cancer", y = "Predicted Probability", color = "Cancer or Non-cancer") +  
  scale_y_continuous(limits = c(0, 1)) + 
  theme_minimal() +
  ggtitle("Predicted Probabilities for Cancer or Non-cancer with LOESS Line")

ggplot(pred_df, aes(x = cancer, y = prob)) +
  geom_point(aes(color = cancer), size = 1.5) +  
  geom_smooth(method = "loess", aes(group = 1), color = "black", linetype = "dotted", size = 0.5, span = 0.9, se = TRUE) +
  labs(x = "Cancer or Non-cancer", y = "Predicted Probability", color = "Cancer or Non-cancer") +
  scale_y_continuous(limits = c(0, 1)) + 
  theme_minimal() +
  ggtitle("Predicted Probabilities for Cancer or Non-cancer (with LOESS)")

####################################################################################################################

#Year

pred_df <- data.frame(year = estimand_model_recode1$year, prob = pred_probs)
pred_df$year <- factor(pred_df$year)

ggplot(pred_df, aes(x = year, y = prob)) +
  geom_boxplot(aes(color = year), alpha = 0.3, outlier.shape = TRUE, width = 0.4) +
  labs(x = "Year", y = "Predicted Probability", color = "Year") +
  scale_y_continuous(limits = c(0, 1)) +
  theme_minimal() +
  ggtitle("Predicted Probabilities by Year")

ggplot(pred_df, aes(x = year, y = prob)) +
  geom_boxplot(aes(color = year), alpha = 0.3, outlier.shape = TRUE, width = 0.4) +
  labs(x = "Year", y = "Predicted Probability", color = "Year") +
  scale_y_continuous(limits = c(0, 1)) +
  theme_minimal() +
  ggtitle("Predicted Probabilities for Year")

ggplot(pred_df, aes(x = year, y = prob)) +
  geom_boxplot(aes(color = year), alpha = 0.3, outlier.shape = TRUE, width = 0.4) + 
  geom_smooth(method = "loess", aes(group = 1), color = "black", linetype = "dotted", size = 0.5, span = 0.9) +  
  labs(x = "Year", y = "Predicted Probability", color = "Year") +  
  scale_y_continuous(limits = c(0, 1)) + 
  theme_minimal() +
  ggtitle("Predicted Probabilities for Year with LOESS Line")

ggplot(pred_df, aes(x = year, y = prob)) +
  geom_point(aes(color = year), size = 1.5) +  
  geom_smooth(method = "loess", aes(group = 1), color = "black", linetype = "dotted", size = 0.5, span = 0.9, se = TRUE) +
  labs(x = "Year", y = "Predicted Probability", color = "Year") +
  scale_y_continuous(limits = c(0, 1)) + 
  theme_minimal() +
  ggtitle("Predicted Probabilities for Year (with LOESS)")

####################################################################################################################

#UK

pred_df <- data.frame(uk = estimand_model_recode1$uk, prob = pred_probs)
pred_df$uk <- factor(pred_df$uk)

ggplot(pred_df, aes(x = uk, y = prob)) +
  geom_boxplot(aes(color = uk), alpha = 0.3, outlier.shape = TRUE, width = 0.4) +
  labs(x = "Trial run in the UK?", y = "Predicted Probability", color = "Trial run in the UK?") +
  scale_y_continuous(limits = c(0, 1)) +
  theme_minimal() +
  ggtitle("Predicted Probabilities by trial being run in the UK")

ggplot(pred_df, aes(x = uk, y = prob)) +
  geom_boxplot(aes(color = uk), alpha = 0.3, outlier.shape = TRUE, width = 0.4) +
  labs(x = "Trial run in the UK?", y = "Predicted Probability", color = "Trial run in the UK?") +
  scale_y_continuous(limits = c(0, 1)) +
  theme_minimal() +
  ggtitle("Predicted Probabilities for trial being run in the UK")

ggplot(pred_df, aes(x = uk, y = prob)) +
  geom_boxplot(aes(color = uk), alpha = 0.3, outlier.shape = TRUE, width = 0.4) + 
  geom_smooth(method = "lm", aes(group = 1), color = "black", linetype = "dotted", size = 0.5, span = 0.99) +  
  labs(x = "Trial run in the UK?", y = "Predicted Probability", color = "Trial run in the UK?") +  
  scale_y_continuous(limits = c(0, 1)) + 
  theme_minimal() +
  ggtitle("Predicted Probabilities for trial being run in the UK with Linear Line")

ggplot(pred_df, aes(x = uk, y = prob)) +
  geom_point(aes(color = uk), size = 1.5) +  
  geom_smooth(method = "lm", aes(group = 1), color = "black", linetype = "dotted", size = 0.5, span = 0.99, se = TRUE) +
  labs(x = "Trial run in the UK?", y = "Predicted Probability", color = "Trial run in the UK?") +
  scale_y_continuous(limits = c(0, 1)) + 
  theme_minimal() +
  ggtitle("Predicted Probabilities for trial being run in the UK (with Linear fit)")

###################################################################################################################

#Country

pred_df <- data.frame(country = estimand_model_recode1$country, prob = pred_probs)
pred_df$country <- factor(pred_df$country)

ggplot(pred_df, aes(x = country, y = prob)) +
  geom_boxplot(aes(color = country), alpha = 0.3, outlier.shape = TRUE, width = 0.4) +
  labs(x = "Country", y = "Predicted Probability", color = "Country") +
  scale_y_continuous(limits = c(0, 1)) +
  theme_minimal() +
  ggtitle("Predicted Probabilities by Country")

ggplot(pred_df, aes(x = country, y = prob)) +
  geom_boxplot(aes(color = country), alpha = 0.3, outlier.shape = TRUE, width = 0.4) +
  labs(x = "Country", y = "Predicted Probability", color = "Country") +
  scale_y_continuous(limits = c(0, 1)) +
  theme_minimal() +
  ggtitle("Predicted Probabilities by Country")

ggplot(pred_df, aes(x = country, y = prob)) +
  geom_boxplot(aes(color = country), alpha = 0.3, outlier.shape = TRUE, width = 0.4) + 
  geom_smooth(method = "loess", aes(group = 1), color = "black", linetype = "dotted", size = 0.5, span = 0.9) +  
  labs(x = "Country", y = "Predicted Probability", color = "Country") +  
  scale_y_continuous(limits = c(0, 1)) + 
  theme_minimal() +
  ggtitle("Predicted Probabilities by Country with LOESS Line")

ggplot(pred_df, aes(x = country, y = prob)) +
  geom_point(aes(color = country), size = 1.5) +  
  geom_smooth(method = "loess", aes(group = 1), color = "black", linetype = "dotted", size = 0.5, span = 0.9, se = TRUE) +
  labs(x = "Country", y = "Predicted Probability", color = "Country") +
  scale_y_continuous(limits = c(0, 1)) + 
  theme_minimal() +
  ggtitle("Predicted Probabilities by Country (with LOESS)")

##############################################################################################################

#Phase

pred_df <- data.frame(phase = estimand_model_recode1$phase, prob = pred_probs)
pred_df$phase <- factor(pred_df$phase)

ggplot(pred_df, aes(x = phase, y = prob)) +
  geom_boxplot(aes(color = phase), alpha = 0.3, outlier.shape = TRUE, width = 0.4) +
  labs(x = "Trial Phase", y = "Predicted Probability", color = "Trial Phase") +
  scale_y_continuous(limits = c(0, 1)) +
  theme_minimal() +
  ggtitle("Predicted Probabilities by Trial Phase")

ggplot(pred_df, aes(x = phase, y = prob)) +
  geom_boxplot(aes(color = phase), alpha = 0.3, outlier.shape = TRUE, width = 0.4) +
  labs(x = "Trial Phase", y = "Predicted Probability", color = "Trial Phase") +
  scale_y_continuous(limits = c(0, 1)) +
  theme_minimal() +
  ggtitle("Predicted Probabilities by Trial Phase")

ggplot(pred_df, aes(x = phase, y = prob)) +
  geom_boxplot(aes(color = phase), alpha = 0.3, outlier.shape = TRUE, width = 0.4) + 
  geom_smooth(method = "loess", aes(group = 1), color = "black", linetype = "dotted", size = 0.5, span = 0.9) +  
  labs(x = "Trial Phase", y = "Predicted Probability", color = "Trial Phase") +  
  scale_y_continuous(limits = c(0, 1)) + 
  theme_minimal() +
  ggtitle("Predicted Probabilities by Trial Phase with LOESS Line")

ggplot(pred_df, aes(x = phase, y = prob)) +
  geom_point(aes(color = phase), size = 1.5) +  
  geom_smooth(method = "loess", aes(group = 1), color = "black", linetype = "dotted", size = 0.5, span = 0.9, se = TRUE) +
  labs(x = "Trial Phase", y = "Predicted Probability", color = "Trial Phase") +
  scale_y_continuous(limits = c(0, 1)) + 
  theme_minimal() +
  ggtitle("Predicted Probabilities by Trial Phase (with LOESS)")

##############################################################################################################

#Random Allocation 

pred_df <- data.frame(random = estimand_model_recode1$random, prob = pred_probs)
pred_df$random <- factor(pred_df$random)

ggplot(pred_df, aes(x = random, y = prob)) +
  geom_boxplot(aes(color = random), alpha = 0.3, outlier.shape = TRUE, width = 0.4) +
  labs(x = "Allocation Type", y = "Predicted Probability", color = "Allocation Type") +
  scale_y_continuous(limits = c(0, 1)) +
  theme_minimal() +
  ggtitle("Predicted Probabilities for Allocation Type")

ggplot(pred_df, aes(x = random, y = prob)) +
  geom_boxplot(aes(color = random), alpha = 0.3, outlier.shape = TRUE, width = 0.4) +
  labs(x = "Allocation  Type", y = "Predicted Probability", color = "Allocation Type") +
  scale_y_continuous(limits = c(0, 1)) +
  theme_minimal() +
  ggtitle("Predicted Probabilities for Allocation Type")

ggplot(pred_df, aes(x = random, y = prob)) +
  geom_boxplot(aes(color = random), alpha = 0.3, outlier.shape = TRUE, width = 0.4) + 
  geom_smooth(method = "loess", aes(group = 1), color = "black", linetype = "dotted", size = 0.5) +  
  labs(x = "Allocation Type", y = "Predicted Probability", color = "Allocation Type") +  
  scale_y_continuous(limits = c(0, 1)) + 
  theme_minimal() +
  ggtitle("Predicted Probabilities for Allocation Type with LOESS Line")

ggplot(pred_df, aes(x = random, y = prob)) +
  geom_point(aes(color = random), size = 1.5) +  
  geom_smooth(method = "loess", aes(group = 1), color = "black", linetype = "dotted", size = 0.5, se = TRUE) +
  labs(x = "Allocation Type", y = "Predicted Probability", color = "Allocation Type") +
  theme_minimal() +
  ggtitle("Predicted Probabilities for Allocation Type (with LOESS)")

#Filter to just NON-RANDOMISED VS RANDOMISED

filtered_random <- pred_df %>%
  filter(random %in% c("Non-Randomised", "Randomised"))

ggplot(filtered_random, aes(x = random, y = prob)) +
  geom_boxplot(aes(color = random), alpha = 0.3, outlier.shape = TRUE, width = 0.4) +
  labs(x = "Allocation  Type", y = "Predicted Probability", color = "Allocation Type") +
  scale_y_continuous(limits = c(0, 1)) +
  theme_minimal() +
  ggtitle("Predicted Probabilities for Allocation Type")

ggplot(filtered_random, aes(x = random, y = prob)) +
  geom_boxplot(aes(color = random), alpha = 0.3, outlier.shape = TRUE, width = 0.4) + 
  geom_smooth(method = "loess", aes(group = 1), color = "black", linetype = "dotted", size = 0.5, span = 0.9) +  
  labs(x = "Allocation Type", y = "Predicted Probability", color = "Allocation Type") +  
  scale_y_continuous(limits = c(0, 1)) + 
  theme_minimal() +
  ggtitle("Predicted Probabilities for Allocation Type with LOESS Line")

ggplot(filtered_random, aes(x = random, y = prob)) +
  geom_point(aes(color = random), size = 1.5) +  
  geom_smooth(method = "loess", aes(group = 1), color = "black", linetype = "dotted", size = 0.5, span = 0.9, se = TRUE) +
  labs(x = "Allocation Type", y = "Predicted Probability", color = "Allocation Type") +
  scale_y_continuous(limits = c(0, 1)) + 
  theme_minimal() +
  ggtitle("Predicted Probabilities for Allocation Type (with LOESS)")

##############################################################################################################

#Intervention model

pred_df <- data.frame(int_model = estimand_model_recode1$int_model, prob = pred_probs)
pred_df$int_model <- factor(pred_df$int_model)

ggplot(pred_df, aes(x = int_model, y = prob)) +
  geom_boxplot(aes(color = int_model), alpha = 0.3, outlier.shape = TRUE, width = 0.4) +
  labs(x = "Intervention Design", y = "Predicted Probability", color = "Intervention Design") +
  scale_y_continuous(limits = c(0, 1)) +
  theme_minimal() +
  ggtitle("Predicted Probabilities by Intervention Design")

ggplot(pred_df, aes(x = int_model, y = prob)) +
  geom_boxplot(aes(color = int_model), alpha = 0.3, outlier.shape = TRUE, width = 0.4) +
  labs(x = "Intervention Design", y = "Predicted Probability", color = "Intervention Design") +
  scale_y_continuous(limits = c(0, 1)) +
  theme_minimal() +
  ggtitle("Predicted Probabilities by Intervention Design")

ggplot(pred_df, aes(x = int_model, y = prob)) +
  geom_boxplot(aes(color = int_model), alpha = 0.3, outlier.shape = TRUE, width = 0.4) + 
  geom_smooth(method = "loess", aes(group = 1), color = "black", linetype = "dotted", size = 0.5) +  
  labs(x = "Intervention Design", y = "Predicted Probability", color = "Intervention Design") +  
  scale_y_continuous(limits = c(0, 1)) + 
  theme_minimal() +
  ggtitle("Predicted Probabilities by Intervention Design with LOESS Line")

ggplot(pred_df, aes(x = int_model, y = prob)) +
  geom_point(aes(color = int_model), size = 1.5) +  
  geom_smooth(method = "loess", aes(group = 1), color = "black", linetype = "dotted", size = 0.5, se = TRUE) +
  labs(x = "Intervention Design", y = "Predicted Probability", color = "Intervention Design") +
  theme_minimal() +
  ggtitle("Predicted Probabilities by Intervention Design (with LOESS)")

#Filter to remove "Missing"

filtered_int <- pred_df %>%
  filter(int_model %in% c("Factorial", "Crossover", "Sequential", "Single Group", "Parallel"))

ggplot(filtered_int, aes(x = int_model, y = prob)) +
  geom_boxplot(aes(color = int_model), alpha = 0.3, outlier.shape = TRUE, width = 0.4) +
  labs(x = "Intervention Design", y = "Predicted Probability", color = "Intervention Design") +
  scale_y_continuous(limits = c(0, 1)) +
  theme_minimal() +
  ggtitle("Predicted Probabilities by Intervention Design")

ggplot(filtered_int, aes(x = int_model, y = prob)) +
  geom_boxplot(aes(color = int_model), alpha = 0.3, outlier.shape = TRUE, width = 0.4) + 
  geom_smooth(method = "loess", aes(group = 1), color = "black", linetype = "dotted", size = 0.5) +  
  labs(x = "Intervention Design", y = "Predicted Probability", color = "Intervention Design") +  
  scale_y_continuous(limits = c(0, 1)) + 
  theme_minimal() +
  ggtitle("Predicted Probabilities by Intervention Design with LOESS Line")

ggplot(filtered_int, aes(x = int_model, y = prob)) +
  geom_point(aes(color = int_model), size = 1.5) +  
  geom_smooth(method = "loess", aes(group = 1), color = "black", linetype = "dotted", size = 0.5, se = TRUE) +
  labs(x = "Intervention Design", y = "Predicted Probability", color = "Intervention Design") +
  scale_y_continuous(limits = c(0, 1)) + 
  theme_minimal() +
  ggtitle("Predicted Probabilities by Intervention Design (with LOESS)")

```

#Combined plots

```{r Combined plot test, include=TRUE}

#Sponsor type

pred_df <- data.frame(year = estimand_model_recode1$year, sponsor = estimand_model_recode1$sponsor, prob = pred_probs)
pred_df$year <- factor(pred_df$year)
pred_df$sponsor <- factor(pred_df$sponsor)

#Filter to remove "Missing"

filtered_sponsor2 <- pred_df %>%
  filter(sponsor %in% c("Non-Industry", "Industry"))

ggplot(filtered_sponsor2, aes(x = year, y = prob)) +
  geom_point(aes(color = year), size = 1.2) +  # Scatter plot with points colored by year
  geom_smooth(aes(color = sponsor, group = sponsor), method = "loess", linetype = "dotted", size = 0.8, span = 0.75, se = TRUE) +  # Loess line for each industry type
  labs(x = "Year", y = "Predicted Probability", color = "Sponsor Type") +  # Add axis labels and legend title
  scale_y_continuous(limits = c(0, 1)) +  # Set y-axis limits between 0 and 1
  theme_minimal() +
  ggtitle("Predicted Probabilities for 2021-2024 by Sponsor Type (with LOESS)")

```
